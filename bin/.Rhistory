?mutate
??mutate
library(tidyverse)
?mutate
?relocate
blah <- tibble(a=1:2, b=3:4, c=2:4)
blah
blah <- tibble(a=1:3, b=3:5, c=2:4)
blah
blah %>% relocate(a,.after=last_col())
blah %>% relocate(a,b,.after=last_col())
?flank
library(GenomicRanges)
?flank
gr1
?GRanges
gr3 <- GRanges(seqnames='seq1',
IRanges(2,1)
)
gr3
gr3 %>% flank(width=1)
gr3 %>% flank(width=1,start=TRUE)
gr3 %>% flank(width=1,start=FALSE)
gr4 <- GRanges(seqnames='seq1',
IRanges(3,2)
)
gr3
gr4
findOverlaps(gr3,gr4)
findOverlaps(gr3,gr4,maxgap=0)
findOverlaps(gr3,gr4,maxgap=1)
?poisson.test
poisson.test(c(1078,187),c(17643,15295))
blah
blah %>% pull(a)
blah %>% pull("a")
?switch
?quo_name
??quo_name
?enquo
?as_name
name_of <- function(x) {
rlang::as_name(rlang::ensym(x))
}
y <- 1
name_of(y)     # "y"
name_of("y")
df <- tibble(
id = 1:5,
my_listcol = list(
c(10, 20, 30),  # length 3
c(5),           # length 1
integer(0),     # length 0
c(2, 4),        # length 2
c(99, 100, 101, 102) # length 4
)
)
df
add_listcol_summaries <- function(.data, col) {
nm <- as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm)        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
add_listcol_summaries <- function(.data, col) {
nm <- rlang::as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm)        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
add_listcol_summaries <- function(.data, col) {
nm <- rlang::as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm)        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
add_listcol_summaries <- function(.data, col) {
nm <- rlang::as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm, length(nm))        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
add_listcol_summaries <- function(.data, col) {
nm <- rlang::as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm, length(nm)+1)        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
add_listcol_summaries <- function(.data, col) {
nm <- rlang::as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm, class(nm))        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
add_listcol_summaries <- function(.data, col) {
nm <- rlang::as_name(ensym(col))                 # <- "my_listcol" (string)
message("Processing column: ", nm, length(col))        # show we have the string
.data %>%
mutate(
# use the list-column
"{nm}_len"   := lengths({{ col }}),
# first element of each list (NA if empty)
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>% add_listcol_summaries(my_listcol)
df <- tibble(
id = 1:5,
my_listcol = list(
c(10, 20, 30),
c(5),
integer(0),
c(2, 4),
c(99, 100, 101, 102)
)
)
add_listcol_summaries <- function(col) {
nm <- as_name(ensym(col))  # "my_listcol"
tibble(
"{nm}_len"   := lengths({{ col }}),
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>%
mutate(!!!add_listcol_summaries(my_listcol))
add_listcol_summaries <- function(col) {
nm <- rlang::as_name(ensym(col))  # "my_listcol"
tibble(
"{nm}_len"   := lengths({{ col }}),
"{nm}_first" := map_int({{ col }}, 1, .default = NA_integer_)
)
}
df %>%
mutate(!!!add_listcol_summaries(my_listcol))
add_listcol_summaries <- function(col) {
nm <- rlang::as_name(ensym(col))  # "my_listcol"
length(col)
}
df %>%
mutate(!!!add_listcol_summaries(my_listcol))
?enquo
??eval_tidy
?across
sbs_flank = NULL
if(sbs_flank == 0){sbs_flank <- NULL}
sbs_flank == 0
sbs_flank
if(!is.null(sbs_flank) & sbs_flank == 0){sbs_flank <- NULL}
!is.null(sbs_flank)
sbs_flank == 0
FALSE & logical(0)
sbs_flank
if(!is.null(sbs_flank) & sbs_flank == 0){sbs_flank <- NULL}
if(!is.null(sbs_flank) && sbs_flank == 0){sbs_flank <- NULL}
!is.null(sbs_flank) && sbs_flank == 0
sbs_flank
sbs_flank = 0
if(!is.null(sbs_flank) && sbs_flank == 0){sbs_flank <- NULL}
sbs_flank
sbs_flank=3
if(!is.null(sbs_flank) && sbs_flank == 0){sbs_flank <- NULL}
sbs_flank
gr1
gr
?GRanges
gr <- GRanges(Rle(c("chr2", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
IRanges(1:10, width=10:1, names=head(letters, 10)),
Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),
score=1:10, GC=seq(1, 0, length=10),
seqinfo=seqinfo)
gr
library(GenomicRanges)
gr <- GRanges(Rle(c("chr2", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
IRanges(1:10, width=10:1, names=head(letters, 10)),
Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),
score=1:10, GC=seq(1, 0, length=10),
seqinfo=seqinfo)
gr
gr <- GRanges(Rle(c("chr2", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
IRanges(1:10, width=10:1, names=head(letters, 10)),
Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),
score=1:10, GC=seq(1, 0, length=10))
stopifnot(identical(gr0, gr))
gr
c(gr,gr) %>% class
gr %>% class
c(gr,gr)
gr
??trim
?trim
??trim
rep("sdf",0)
ccs_sbs_flank = NULL
if(!is.null(ccs_sbs_flank) && ccs_sbs_flank == 0){ccs_sbs_flank <- NULL}
ccs_sbs_flank
ccs_sbs_flank = nA
ccs_sbs_flank = NA
if(!is.null(ccs_sbs_flank) && ccs_sbs_flank == 0){ccs_sbs_flank <- NULL}
library(configr)
blah <- read.config("~/Desktop/blah.yaml")
blah
blah$filtergroups
blah$filtergroups[[1]]
blah$filtergroups[[1]]$ccs_sbs_flank
ccs_sbs_flank <- blah$filtergroups[[1]]$ccs_sbs_flank
if(!is.null(ccs_sbs_flank) && ccs_sbs_flank == 0){ccs_sbs_flank <- NULL}
blah
germline_vcf_types_config <- blah %>%
enframe(name=NULL) %>%
unnest_wider(value)
germline_vcf_types_config <- blah$germline_vcf_types %>%
enframe(name=NULL) %>%
unnest_wider(value)
germline_vcf_types_config
blah <- read.config("~/Desktop/blah.yaml")
germline_vcf_types_config <- blah$germline_vcf_types %>%
enframe(name=NULL) %>%
unnest_wider(value)
germline_vcf_types_config
germline_vcf_types_config %>% print(width=Inf,n=Inf)
blah <- read.config("~/Desktop/blah.yaml")
germline_vcf_types_config <- blah$germline_vcf_types %>%
enframe(name=NULL) %>%
unnest_wider(value)
germline_vcf_types_config %>% print(width=Inf,n=Inf)
??FindSubCluster
407.423232
407.423232 %>% round
?round
407.423232 %>% signif(2)
407.423232 %>% round(2)
NA+NA
?across
?reduce
?reduce
?Map
?str_c
?map2
?str_c
str_c("sdf","xcv")
str_c("sdf","xcv",sep=".")
?reduce
?cur_group
str_c("sdf",NA)
str_c("sdfsdf",NA,sep=".")
?str_c
str_c("sdfsdf",NA,sep=".", na.rm=T)
str_c("A", NA, "B", sep = "-", na.rm = TRUE)
str_c(str_c("A","B"),"C",NA,"D")
str_c(str_c("A","B"),c("C",NA,"D"))
str_c(str_c("A","B"),c("C",NA,"D"),sep=".")
str_c(str_c("A","B"),c("C","D"),sep=".")
str_c(str_c("A","B"),"C","D",sep=".")
str_c(str_c("A","B"),"C",NA,"D",sep=".")
str_c(str_c("A","B"),c("C",NA,"D",sep="."),sep=".")
str_c(str_c("A","B"),str_c("C",NA,"D",sep="."),sep=".")
str_c(str_c("A","B"),str_c(c("C",NA,"D") %>% discard(is.na),sep="."),sep=".")
c("C",NA,"D") %>% discard(is.na)
str_c(c("C",NA,"D") %>% discard(is.na),sep=".")
str_c("C","D",sep=".")
str_c(c("C","D"),sep=".")
str_c(c("C","D"),collapse=".")
str_c(str_c("A","B"),str_c(c("C",NA,"D") %>% discard(is.na),collapse="."),sep=".")
str_c(str_c("A","B"),str_c(c("C",NA,"D") %>% discard(is.na),collapse="."),collapse=".")
str_c(str_c("A","B"),str_c(c("C",NA,"D") %>% discard(is.na),collapse="."),sep=".")
str_c(str_c("sdf/asdf"),"A" %>% replace_na(""), NA %>% replace_na(""), "C" %>% replace_na(""), "D", sep=".")
"A" %>% replace_na("")
NA %>% replace_na("")
NA %>% replace_na("")
rlang::last_trace()
NA %>% as.character
NA %>% as.character %>% replace_na("")
?str_replace_na
str_c("sdf","xvxcv","","werer",sep=".")
str_flatten("sdf","xvxcv","","werer",sep=".")
str_flatten("sdf","xvxcv","","werer",".")
str_flatten
?str_flatten
str_flatten("sdf","xvxcv","","werer",collapse=".")
str_flatten(c("sdf","xvxcv","","werer"),collapse=".")
str_c("sdf","xvxcv","","werer",sep=".")
str_c("sdf","xvxcv",NA %>% str_replace_na(""),"werer",sep=".")
str_c(c("sdf","xvxcv",NA,"werer") %>% discard(is.na),sep=".")
str_c(c("sdf","xvxcv",NA,"werer") %>% discard(is.na),collapse = =".")
str_c(c("sdf","xvxcv",NA,"werer") %>% discard(is.na),collapse =".")
str_c(
c("sdf", "xvxcv", NA, "werer"),
collapse = "."
)
str_c(
c("sdf", "xvxcv", NA, "werer") %>% discard(is.na),
collapse = "."
)
?discard
str_c(list("sdf"),list("wer"),sep=".")
str_c(list("sdf"),list("wer"),collapse=".")
str_c(c(list("sdf"),list("wer")),sep=".")
str_c(c(list("sdf"),list("wer")),collapse=".")
str_c(c(list("sdf"),list(NA),list("wer")),collapse=".")
str_c(c(list("sdf"),list(NA),list("wer")) %>% discard(is.na),collapse=".")
list("sdf",NA,"were")
str_c(list("sdf",NA,"were"))
str_c(list("sdf",NA,"were"),collapse=".")
str_c(list("sdf",NA,"were") %>% discard(is.na),collapse=".")
300000/2000
300000/2000
paste("sdfds","zxcvzxv")
paste("sdfds","zxcvzxv",c("sdfsdf","23423"))
paste("sdfds","zxcvzxv",paste("sdfsdf","23423"))
